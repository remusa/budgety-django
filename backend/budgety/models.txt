from django import forms
from django.contrib.auth.models import User
from django.db import models
from django.utils.timezone import now


class Category(models.Model):
    auto_increment_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=150, blank=False)
    name_readable = models.CharField(max_length=150, blank=False)
    # parent = models.ForeignKey("Category", on_delete=models.CASCADE, null=True)
    TYPE_CHOICES = [("EXPENSE", "Expense"), ("INCOME", "Income")]
    category_type = models.CharField(choices=TYPE_CHOICES, max_length=100, default="Expense")

    class Meta:
        verbose_name_plural = "Categories"

    def __str__(self):
        return self.name


class Expense(models.Model):
    # CATEGORY_CHOICES = [
    #     ("FOOD_&_DRINK", "Food & Beverages"),
    #     ("BILLS_&_UTILITIES", "Bills & Utilities"),
    #     ("TRANSPORTATION", "Transportation"),
    #     ("SHOPPING", "Shopping"),
    #     ("ENTERTAINMENT", "Entertainment"),
    #     ("HEALTH_&_FITNESS", "Health & Fitness"),
    #     ("GIFTS_&_DONATIONS", "Gifts & Donations"),
    #     ("FAMILY", "Family"),
    #     ("EDUCATION", "Education"),
    #     ("INVESTMENT", "Investment"),
    #     ("BUSINESS", "Business"),
    #     ("INSURANCES", "Insurances"),
    #     ("FEES_&_CHARGES", "Fees & Charges"),
    #     ("WITHDRAWAL", "Withdrawal"),
    #     ("OTHERS", "Others"),
    # ]

    amount = models.FloatField(blank=True, default=0)
    # category = models.CharField(
    #     choices=CATEGORY_CHOICES, max_length=100, default="Food & Beverages"
    # )
    subcategories = (Category.objects.filter(category__category_type="Expense"),)
    category = models.ForeignKey("Category", on_delete=models.SET_NULL, null=True)
    note = models.CharField(max_length=150, blank=True, default="")
    date = models.DateTimeField(auto_now_add=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    owner = models.ForeignKey(
        "auth.User", related_name="expenses", on_delete=models.CASCADE, null=True
    )

    class Meta:
        ordering = ("date",)

    def __str__(self):
        return self.note


class Income(models.Model):
    CATEGORY_CHOICES = [
        ("SALARY", "Salary"),
        ("INTEREST_MONEY", "Interest money"),
        ("GIFTS", "Gifts"),
        ("SELLING", "Selling"),
        ("AWARD", "Award"),
        ("OTHERS", "Others"),
    ]

    total = models.FloatField(blank=True, default=0)
    category = models.CharField(choices=CATEGORY_CHOICES, max_length=100, default="Salary")
    # category = models.ForeignKey(IncomeCategory, on_delete=models.SET_NULL, null=True)
    note = models.CharField(max_length=150, blank=True, default="")
    date = models.DateTimeField(default=now, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    owner = models.ForeignKey(
        "auth.User", related_name="incomes", on_delete=models.CASCADE, null=True
    )

    class Meta:
        ordering = ("date",)

    def __str__(self):
        return self.note




